import { DropzoneState } from 'react-dropzone';
import tw, { styled } from 'twin.macro';

const PicInput = ({
  dropzone,
  picturesState,
  setter,
  pictureData,
}: {
  dropzone: DropzoneState;
  picturesState: typeof pictureData[];
  setter: (arg: any) => void;
  pictureData: { picture: string; name: string };
}) => {
  const Container = styled.div`
    ${tw`max-height[18rem] h-20 min-w-15 width[fit-content] border-2 border-solid border-secondary
          bg-thinPlusSvg bg-primary bg-center bg-no-repeat transition-all duration-200 
          hover:bg-thickPlusSvg hover:bg-hover hover:bg-center hover:bg-no-repeat`}
    .closeable {
      ${tw`bg-closeSvg`}
      background-size: 30px 30px;
    }
  `;

  const isEmptyInput = pictureData.name === '';
  const onClickErase = () => {
    const redactedPicturesState = picturesState.filter(picture => picture.name !== pictureData.name);
    setter(redactedPicturesState);
  };
  return (
    <div
      tw="max-height[18rem] h-20 min-w-15 width[fit-content] border-2 border-solid border-secondary
          bg-thinPlusSvg bg-primary bg-center bg-no-repeat transition-all duration-200 
          hover:bg-thickPlusSvg hover:bg-hover hover:bg-center hover:bg-no-repeat"
      {...(isEmptyInput ? { ...dropzone.getRootProps() } : undefined)}
      {...(!isEmptyInput
        ? {
            onClick: onClickErase,
            className: 'closeable',
          }
        : undefined)}
    >
      {isEmptyInput ? <input {...dropzone.getInputProps()} /> : null}
      <img
        tw="h-full transition-all duration-200 hover:opacity-30"
        src={pictureData.picture ? `data:image/jpg;base64, ${pictureData.picture}` : undefined}
      />
    </div>
  );
};

export default PicInput;
